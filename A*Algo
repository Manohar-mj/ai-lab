class Graph:
    def __init__(self, adj_list):
        self.adj_list = adj_list
        
    def get_near_node(self,v):
        return self.adj_list[v]
    def h(self,n):
        H={
            'A':1,
            'B':1,
            'C':1,
            'D':1,
            'E':1,
            'F':1,
            'G':1,
            'H':1,
            'I':1,
            'J':1
        }
        return H[n]
    def a_star_algo(self,start,stop):
        open_lt=set([start])
        closed_lt=set([])
        poo={}
        poo[start]=0
        par={}
        par[start]=start
        while len(open_lt) > 0:
            n=None
            for v in open_lt:
                if n == None or poo[v] + self.h(v) < poo[n] +self.h(n):
                    n=v;
            if n == None:
                print("path does not exit\ncheck near node")
                return None
            if n==stop:
                recconst_path=[]
                while par[n]!=n:
                    recconst_path.append(n)
                    n=par[n]
                recconst_path.append(start)
                recconst_path.reverse()
                print('Path found : {}'.format(recconst_path))
                return recconst_path
            for (m,weight) in self.get_near_node(n):
                if m not in open_lt and m not in closed_lt:
                    open_lt.add(m)
                    par[m]=n
                    poo[m]=poo[n]+weight
                else:
                    if poo[m] > poo[n]+weight:
                        poo[m] = poo[n]+weight
                        par[m]=n
                        if m in closed_lt:
                            closed_lt.remove(m)
                            open_lt.add(m)
            open_lt.remove(n)
            closed_lt.add(n)
        print('Path does not exist!')
        return None
adj_list = {
    'A': [('B', 6), ('F', 3)],
    'B': [('C', 3),('D',2),('A',6)],
    'C': [('B', 3),('D',1),('E',5)],
    'D':[('B',2),('C',1),('E',8)],
    'E':[('D',8),('I',5),('J',5)],
    'F':[('A',3),('G',1),('H',7)],
    'G': [('I',3),('F',1)],
    'H': [('I',2),('F',7)],
    'I': [('E',5),('J',3),('G',3),('H',2)],
    'J': [('E',5),('I',3)]
    
}
graph1 = Graph(adj_list)
graph1.a_star_algo('A','J')
